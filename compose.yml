services:

  upstream:
    image: quay.io/strimzi/kafka:latest-kafka-3.9.0
    command: [
        "sh", "-c",
        "./bin/kafka-storage.sh format -t $$(./bin/kafka-storage.sh random-uuid) -c ./config/kraft/server.properties && ./bin/kafka-server-start.sh ./config/kraft/server.properties --override listener.security.protocol.map=$${KAFKA_LISTENER_SECURITY_PROTOCOL_MAP} --override inter.broker.listener.name=$${KAFKA_INTER_BROKER_LISTENER_NAME} --override controller.listener.names=$${KAFKA_CONTROLLER_LISTENER_NAME} --override process.roles=$${KAFKA_PROCESS_ROLES} --override listeners=$${KAFKA_LISTENERS} --override advertised.listeners=$${KAFKA_ADVERTISED_LISTENERS}"
    ]
    user: root
    environment:
      KAFKA_LISTENERS: BROKER://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: BROKER://:9092,CONTROLLER://:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: BROKER:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: BROKER
      KAFKA_CONTROLLER_LISTENER_NAME: CONTROLLER
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LOG_DIRS: '/tmp/kraft-upstream-logs'
    networks:
      - mm2-net

  downstream:
    image: quay.io/strimzi/kafka:latest-kafka-3.9.0
    command: [
        "sh", "-c",
        "./bin/kafka-storage.sh format -t $$(./bin/kafka-storage.sh random-uuid) -c ./config/kraft/server.properties && ./bin/kafka-server-start.sh ./config/kraft/server.properties --override listener.security.protocol.map=$${KAFKA_LISTENER_SECURITY_PROTOCOL_MAP} --override inter.broker.listener.name=$${KAFKA_INTER_BROKER_LISTENER_NAME} --override controller.listener.names=$${KAFKA_CONTROLLER_LISTENER_NAME} --override process.roles=$${KAFKA_PROCESS_ROLES} --override listeners=$${KAFKA_LISTENERS} --override advertised.listeners=$${KAFKA_ADVERTISED_LISTENERS}"
    ]
    user: root
    environment:
      KAFKA_LISTENERS: BROKER://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: BROKER://:9092,CONTROLLER://:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: BROKER:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: BROKER
      KAFKA_CONTROLLER_LISTENER_NAME: CONTROLLER
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LOG_DIRS: '/tmp/kraft-downstream-logs'
    networks:
      - mm2-net

  mirror-maker2:
    image: quay.io/strimzi/kafka:latest-kafka-3.9.0
    command: [
        "sh", "-c",
        "bin/connect-mirror-maker.sh config/connect-mirror-maker.properties"
    ]
    depends_on:
      - upstream
      - downstream
    volumes:
      - type: bind
        source: ./data/mirror-maker2/connect-mirror-maker.properties
        target: /opt/kafka/config/connect-mirror-maker.properties
    networks:
      - mm2-net

  producer-perf-test:
    image: quay.io/strimzi/kafka:latest-kafka-3.9.0
    command: bash -c "/tmp/kafka-producer-perf-test.sh ${TOPIC_NAME}"
    depends_on:
      - upstream
    volumes:
      - type: bind
        source: ./data/kafka/upstream/client.properties
        target: /tmp/client.properties
      - type: bind
        source: ./data/kafka/upstream/kafka-producer-perf-test.sh
        target: /tmp/kafka-producer-perf-test.sh
    environment:
      TOPIC_NAME:

  mirror-maker-exporter:
    image: quay.io/mronconi/mirror-maker-exporter:1.0.0-SNAPSHOT
    entrypoint: ["/bin/sh", "-c", "'/opt/jboss/wait_and_run.sh'"]
    volumes:
      - type: bind
        source: ./data/exporter/wait_and_run.sh
        target: /opt/jboss/wait_and_run.sh
    depends_on:
      - upstream
      - downstream
    ports:
      - "0.0.0.0:8090:8080"
    networks:
      - mm2-net

  prometheus:
    image: prom/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    volumes:
      - type: bind
        source: ./data/prometheus/prometheus.yml
        target: /etc/prometheus/prometheus.yml
    depends_on:
      - mirror-maker-exporter

  grafana:
    image: grafana/grafana
    ports:
      - '3000:3000'
    depends_on:
      - prometheus
    volumes:
      - type: bind
        source: ./data/grafana/mm2-exporter.json
        target:   /var/lib/grafana/dashboards/mm2-exporter.json
      - type: bind
        source: ./data/grafana/datasource.yml
        target: /etc/grafana/provisioning/datasources/datasource.yml
      - type: bind
        source: ./data/grafana/dashboard.yml
        target: /etc/grafana/provisioning/dashboards/dashboard.yml

networks:
  mm2-net:
    driver: bridge
